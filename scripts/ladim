#! /usr/bin/env python

import argparse
import logging
import datetime
import os.path

from ladim.configuration import configure
from ladim.gridforce import Grid, Forcing
from ladim.release import ParticleReleaser
from ladim.state import State
from ladim.output import OutPut

# ====================
# Parse command line
# ====================

parser = argparse.ArgumentParser(
    description='LADiM â€” Lagrangian Advection and Diffusion Model')
parser.add_argument(
    '-d', '--debug',
    help="Show more information",
    action="store_const", dest="loglevel", const=logging.DEBUG,
    default=logging.INFO)
parser.add_argument(
    '-s', '--silent',
    help='Show less information',
    action="store_const", dest="loglevel", const=logging.WARNING)
parser.add_argument('config_file', nargs='?', default='ladim.yaml')
args = parser.parse_args()

# ==================
# Initiate the model
# ==================

# --- Logging ---
logging.basicConfig(
    level=args.loglevel,
    format='%(levelname)s:%(module)s - %(message)s')

# --- Configuration ---
if os.path.isfile(args.config_file):
    now = datetime.datetime.now().replace(microsecond=0)
    logging.info(f'LADiM simulation starting: {now}')
else:
    raise SystemExit('ERROR: Configuration file not found')
config = configure(args.config_file)

# --- Initiate the grid and the forcing ---
grid = Grid(config)
forcing = Forcing(config, grid)

# --- Initiate particle releaser ---
releaser = ParticleReleaser(config)

#  --- Initiate the model state ---
state = State(config)

# --- Initiate the output ---
out = OutPut(config, releaser)
# out.write_particle_variables(releaser)

# ==============
# Main time loop
# ==============

logging.info("Starting time loop")
for step in range(config['numsteps']+1):

    # --- Update forcing ---
    forcing.update(step)

    # --- Particle release ---
    if step in releaser.steps:
        V = next(releaser)
        state.append(V)

    # --- Save to file ---
    # Output before update???
    # Have an optional initial output
    if step % config['output_period'] == 0:
        out.write(state, grid)

    # --- Update the model state ---
    state.update(grid, forcing)

# ========
# Clean up
# ========

now = datetime.datetime.now().replace(microsecond=0)
logging.info(f'End of simulation, time={now}')

forcing.close()
# out.close()
